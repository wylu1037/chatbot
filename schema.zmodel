// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  version = 'v5'
  output = "./src/lib/hooks"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String? @password @omit
    image         String?
    accounts      Account[]
    sessions      Session[]
    chats         Chat[]
    // everyone can signup, and user profile is also publicly readable
    @@allow("create,read", true)

    // only the user can update or delete their own profile
    @@allow("update,delete", auth() == this)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Visibility is a enum that can be either public or private.
// related to the Chat model.
enum Visibility {
    PUBLIC @map("public") // 映射到数据库中的public
    PRIVATE @map("private") // 映射到数据库中的private
}

// A chat is a collection of messages
model Chat {
    id String @id @default(cuid())
    title String
    visibility Visibility @default(PRIVATE)

    userId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User User @relation(fields: [userId], references: [id], onDelete: Cascade)
    Messages Message[]
    
    @@allow('create', auth() != null) // Only authenticated users can create a chat
    @@allow('update,delete', auth() == User)
    @@allow('read', auth() == User || (visibility == 'public' && auth() != null))
}

// Role is a enum that can be either user, assistant, or tool.
// related to the Message model.
enum Role {
    USER @map("user")
    ASSISTANT @map("assistant")
    TOOL @map("tool")
}

// A message is a single message in a chat
model Message {
    id String @id @default(cuid())
    chatId String
    role Role
    content String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

    @@allow('create', auth() == Chat.User) // The chat author can create messages
    @@allow('update,delete', auth() == Chat.User) // The chat author can update or delete their own messages
    @@allow('read', auth() == Chat.User || (Chat.visibility == 'public' && auth() != null)) // The chat author or public chats can be read
}
